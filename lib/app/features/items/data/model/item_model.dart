import 'package:easy_vat_v2/app/features/items/domain/entities/item_entities.dart';

class ItemModel extends ItemEntity {
  ItemModel({
    super.itemIdpk,
    super.barcode,
    super.itemCode,
    super.itemName,
    super.description,
    super.unit,
    super.category,
    super.subCategory,
    super.cost,
    super.averageCost,
    super.lastPurchaseCost,
    super.retailRate,
    super.retailPriceLock,
    super.wholeSaleRate,
    super.wholeSalePriceLock,
    super.taxPercentage,
    super.openingStock,
    super.openingCost,
    super.currentStock,
    super.itemNameArabic,
    super.make,
    super.brand,
    super.madeIn,
    super.itemType,
    super.shelfNo,
    super.rackNo,
    super.convention,
    super.isMaster,
    super.accessLetter,
    super.quickItem,
    super.maxDiscPerc,
    super.reorderLevel,
    super.reorderQty,
    super.supplierIdfk,
    super.kitchenNo,
    super.isEditable,
    super.createdDate,
    super.createdBy,
    super.modifiedBy,
    super.updatedDate,
    super.updateGuid,
    super.isActive,
    super.enableSerial,
    super.isScaleItem,
    super.storeCurrentStock,
    super.subItems,
  });

  factory ItemModel.fromJson(Map<String, dynamic> json) => ItemModel(
        itemIdpk: json["itemIDPK"],
        barcode: json["barcode"],
        itemCode: json["itemCode"],
        itemName: json["itemName"],
        description: json["description"],
        unit: json["unit"],
        category: json["category"],
        subCategory: json["subCategory"],
        cost: double.tryParse(json["cost"].toString()),
        averageCost: double.tryParse(json["averageCost"].toString()),
        lastPurchaseCost: double.tryParse(json["lastPurchaseCost"].toString()),
        retailRate: double.tryParse(json["retailRate"].toString()),
        retailPriceLock: double.tryParse(json["retailPriceLock"].toString()),
        wholeSaleRate: double.tryParse(json["wholeSaleRate"].toString()),
        wholeSalePriceLock:
            double.tryParse(json["wholeSalePriceLock"].toString()),
        taxPercentage: double.tryParse(json["taxPercentage"].toString()),
        openingStock: double.tryParse(json["openingStock"].toString()) ?? 0,
        openingCost: double.tryParse(json["openingCost"].toString()),
        currentStock: json["currentStock"],
        itemNameArabic: json["itemNameArabic"],
        make: json["make"],
        brand: json["brand"],
        madeIn: json["madeIn"],
        itemType: json["itemType"],
        shelfNo: json["shelfNo"],
        rackNo: json["rackNo"],
        convention: double.tryParse(json["convention"].toString()),
        isMaster: json["isMaster"],
        accessLetter: json["accessLetter"],
        quickItem: json["quickItem"],
        maxDiscPerc: json["maxDiscPerc"],
        reorderLevel: double.tryParse(json["reorderLevel"].toString()),
        reorderQty: double.tryParse(json["reorderQty"].toString()),
        supplierIdfk: json["supplierIDFK"],
        kitchenNo: double.tryParse(json["kitchenNo"].toString()),
        isEditable: json["isEditable"],
        createdDate: DateTime.parse(json["createdDate"]),
        createdBy: json["createdBy"],
        modifiedBy: json["modifiedBy"],
        updatedDate: DateTime.parse(json["updatedDate"]),
        updateGuid: json["updateGuid"],
        isActive: json["isActive"],
        enableSerial: json["enableSerial"],
        isScaleItem: json["isScaleItem"],
        storeCurrentStock: List<StoreCurrentStockModel>.from(
            json["storeCurrentStock"]
                .map((x) => StoreCurrentStockModel.fromJson(x))),
        subItems: List<SubItemEntity>.from(
            json["subItems"].map((x) => SubItemModel.fromJson(x))),
      );

  Map<String, dynamic> toJson() => {
        "itemIDPK": itemIdpk,
        "barcode": barcode,
        "itemCode": itemCode,
        "itemName": itemName,
        "description": description,
        "unit": unit,
        "category": category,
        "subCategory": subCategory,
        "cost": cost,
        "averageCost": averageCost,
        "lastPurchaseCost": lastPurchaseCost,
        "retailRate": retailRate,
        "retailPriceLock": retailPriceLock,
        "wholeSaleRate": wholeSaleRate,
        "wholeSalePriceLock": wholeSalePriceLock,
        "taxPercentage": taxPercentage,
        "openingStock": openingStock,
        "openingCost": openingCost,
        "currentStock": currentStock,
        "itemNameArabic": itemNameArabic,
        "make": make,
        "brand": brand,
        "madeIn": madeIn,
        "itemType": itemType,
        "shelfNo": shelfNo,
        "rackNo": rackNo,
        "convention": convention,
        "isMaster": isMaster,
        "accessLetter": accessLetter,
        "quickItem": quickItem,
        "maxDiscPerc": maxDiscPerc,
        "reorderLevel": reorderLevel,
        "reorderQty": reorderQty,
        "supplierIDFK": supplierIdfk,
        "kitchenNo": kitchenNo,
        "isEditable": isEditable,
        "createdDate": createdDate?.toIso8601String(),
        "createdBy": createdBy,
        "modifiedBy": modifiedBy,
        "updatedDate": updatedDate?.toIso8601String(),
        "updateGuid": updateGuid,
        "isActive": isActive,
        "enableSerial": enableSerial,
        "isScaleItem": isScaleItem,
      };
}

class StoreCurrentStockModel extends StoreCurrentStockEntity {
  StoreCurrentStockModel({
    super.storeIdpk,
    super.itemIdpk,
    super.currentStock,
    super.companyIdpk,
  });

  factory StoreCurrentStockModel.fromJson(Map<String, dynamic> json) =>
      StoreCurrentStockModel(
        storeIdpk: json["storeIDPK"],
        itemIdpk: json["itemIDPK"],
        currentStock: double.tryParse(json["currentStock"].toString()),
        companyIdpk: json["companyIDPK"],
      );

  Map<String, dynamic> toJson() => {
        "storeIDPK": storeIdpk,
        "itemIDPK": itemIdpk,
        "currentStock": currentStock,
        "companyIDPK": companyIdpk,
      };
}

class SubItemModel extends SubItemEntity {
  SubItemModel({
    super.itemIdpk,
    super.barcode,
    super.itemName,
    super.description,
    super.convention,
    super.unit,
    super.cost,
    super.retailRate,
    super.retailRateWithTax,
    super.retailPriceLock,
    super.wholeSaleRate,
    super.wholeSalePriceLock,
    super.taxPercentage,
    super.currentStock,
    super.itemNameArabic,
    super.accessLetter,
    super.supplierIdfk,
    super.isEditable,
  });

  factory SubItemModel.fromJson(Map<String, dynamic> json) => SubItemModel(
        itemIdpk: json["itemIDPK"],
        barcode: json["barcode"],
        itemName: json["itemName"],
        description: json["description"],
        convention: double.tryParse(json["convention"].toString()),
        unit: json["unit"],
        cost: double.tryParse(json["cost"].toString()),
        retailRate: double.tryParse(json["retailRate"].toString()),
        retailRateWithTax:
            double.tryParse(json["retailRateWithTax"].toString()),
        retailPriceLock: double.tryParse(json["retailPriceLock"].toString()),
        wholeSaleRate: double.tryParse(json["wholeSaleRate"].toString()),
        wholeSalePriceLock:
            double.tryParse(json["wholeSalePriceLock"].toString()),
        taxPercentage: double.tryParse(json["taxPercentage"].toString()),
        currentStock: double.tryParse(json["currentStock"].toString()),
        itemNameArabic: json["itemNameArabic"],
        accessLetter: json["accessLetter"],
        supplierIdfk: json["supplierIDFK"],
        isEditable: json["isEditable"],
      );

  Map<String, dynamic> toJson() => {
        "itemIDPK": itemIdpk,
        "barcode": barcode,
        "itemName": itemName,
        "description": description,
        "convention": convention,
        "unit": unit,
        "cost": cost,
        "retailRate": retailRate,
        "retailRateWithTax": retailRateWithTax,
        "retailPriceLock": retailPriceLock,
        "wholeSaleRate": wholeSaleRate,
        "wholeSalePriceLock": wholeSalePriceLock,
        "taxPercentage": taxPercentage,
        "currentStock": currentStock,
        "itemNameArabic": itemNameArabic,
        "accessLetter": accessLetter,
        "supplierIDFK": supplierIdfk,
        "isEditable": isEditable,
      };

  factory SubItemModel.fromEntity(SubItemEntity entity) => SubItemModel(
        itemIdpk: entity.itemIdpk,
        barcode: entity.barcode,
        itemName: entity.itemName,
        description: entity.description,
        convention: entity.convention,
        unit: entity.unit,
        cost: entity.cost,
        retailRate: entity.retailRate,
        retailRateWithTax: entity.retailRateWithTax,
        retailPriceLock: entity.retailPriceLock,
        wholeSaleRate: entity.wholeSaleRate,
        wholeSalePriceLock: entity.wholeSalePriceLock,
        taxPercentage: entity.taxPercentage,
        currentStock: entity.currentStock,
        itemNameArabic: entity.itemNameArabic,
        accessLetter: entity.accessLetter,
        supplierIdfk: entity.supplierIdfk,
        isEditable: entity.isEditable,
      );

  SubItemEntity toEntity() => SubItemEntity(
        itemIdpk: itemIdpk,
        barcode: barcode,
        itemName: itemName,
        description: description,
        convention: convention,
        unit: unit,
        cost: cost,
        retailRate: retailRate,
        retailRateWithTax: retailRateWithTax,
        retailPriceLock: retailPriceLock,
        wholeSaleRate: wholeSaleRate,
        wholeSalePriceLock: wholeSalePriceLock,
        taxPercentage: taxPercentage,
        currentStock: currentStock,
        itemNameArabic: itemNameArabic,
        accessLetter: accessLetter,
        supplierIdfk: supplierIdfk,
        isEditable: isEditable,
      );
}
