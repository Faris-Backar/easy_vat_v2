import 'package:easy_vat_v2/app/features/purchase/domain/entities/purchase_invoice_entity.dart';

import 'purchased_item_model.dart';

class PurchaseInvoiceModel extends PurchaseInvoiceEntity {
  List<PurchasedItemModel>? purchasedItem;

  PurchaseInvoiceModel({
    super.purchaseIdpk,
    super.purchaseNo,
    super.purchaseMode,
    super.supplierInvoiceNo,
    super.crLedgerIdfk,
    super.drLedgerIdfk,
    super.supplierIdfk,
    super.referenceNo,
    super.purchaseDate,
    super.supplierName,
    super.purchasedBy,
    super.remarks,
    super.lpoNo,
    super.deliveryNo,
    super.quotationNo,
    super.vehicleNo,
    super.grnNo,
    super.genaralNote,
    super.grossAmount,
    super.discount,
    super.tax,
    super.netTotal,
    super.roundOff,
    super.isEditable,
    super.isCanceled,
    super.createdBy,
    super.createdDate,
    super.modifiedBy,
    super.modifiedDate,
    super.rowguid,
    super.isLockVoucher,
    this.purchasedItem,
  }) : super(purchasedItems: purchasedItem);

  factory PurchaseInvoiceModel.fromJson(Map<String, dynamic> json) =>
      PurchaseInvoiceModel(
        purchaseIdpk: json['purchaseIDPK'],
        purchaseNo: json['purchaseNo'],
        purchaseMode: json['purchaseMode'],
        supplierInvoiceNo: json['supplierInvoiceNo'],
        crLedgerIdfk: json['crLedgerIDFK'],
        drLedgerIdfk: json['drLedgerIDFK'],
        supplierIdfk: json['supplierIDFK'],
        referenceNo: json['referenceNo'],
        purchaseDate: json['purchaseDate'] != null
            ? DateTime.parse(json['purchaseDate'])
            : null,
        supplierName: json['supplierName'],
        purchasedBy: json['purchasedBy'],
        remarks: json['remarks'],
        lpoNo: json['lpoNo'],
        deliveryNo: json['deliveryNo'],
        quotationNo: json['quotationNo'],
        vehicleNo: json['vehicleNo'],
        grnNo: json['grnNo'],
        genaralNote: json['genaralNote'],
        grossAmount: (json['grossAmount'] as num?)?.toDouble(),
        discount: (json['discount'] as num?)?.toDouble(),
        tax: (json['tax'] as num?)?.toDouble(),
        netTotal: (json['netTotal'] as num?)?.toDouble(),
        roundOff: (json['roundOff'] as num?)?.toDouble(),
        isEditable: json['isEditable'],
        isCanceled: json['isCanceled'],
        createdBy: json['createdBy'],
        createdDate: json['createdDate'] != null
            ? DateTime.parse(json['createdDate'])
            : null,
        modifiedBy: json['modifiedBy'],
        modifiedDate: json['modifiedDate'] != null
            ? DateTime.parse(json['modifiedDate'])
            : null,
        rowguid: json['rowguid'],
        isLockVoucher: json['isLockVoucher'],
        purchasedItem: (json['purchasedItems'] as List<dynamic>?)
            ?.map((e) => PurchasedItemModel.fromJson(e))
            .toList(),
      );

  Map<String, dynamic> toJson() => {
        'purchaseIDPK': purchaseIdpk,
        'purchaseNo': purchaseNo,
        'purchaseMode': purchaseMode,
        'supplierInvoiceNo': supplierInvoiceNo,
        'crLedgerIDFK': crLedgerIdfk,
        'drLedgerIDFK': drLedgerIdfk,
        'supplierIDFK': supplierIdfk,
        'referenceNo': referenceNo,
        'purchaseDate': purchaseDate?.toIso8601String(),
        'supplierName': supplierName,
        'purchasedBy': purchasedBy,
        'remarks': remarks,
        'lpoNo': lpoNo,
        'deliveryNo': deliveryNo,
        'quotationNo': quotationNo,
        'vehicleNo': vehicleNo,
        'grnNo': grnNo,
        'genaralNote': genaralNote,
        'grossAmount': grossAmount,
        'discount': discount,
        'tax': tax,
        'netTotal': netTotal,
        'roundOff': roundOff,
        'isEditable': isEditable,
        'isCanceled': isCanceled,
        'createdBy': createdBy,
        'createdDate': createdDate?.toIso8601String(),
        'modifiedBy': modifiedBy,
        'modifiedDate': modifiedDate?.toIso8601String(),
        'rowguid': rowguid,
        'isLockVoucher': isLockVoucher,
        'purchasedItems': purchasedItem?.map((e) => e.toJson()).toList(),
      };

  PurchaseInvoiceEntity toEntity() => PurchaseInvoiceEntity(
        purchaseIdpk: purchaseIdpk,
        purchaseNo: purchaseNo,
        purchaseMode: purchaseMode,
        supplierInvoiceNo: supplierInvoiceNo,
        crLedgerIdfk: crLedgerIdfk,
        drLedgerIdfk: drLedgerIdfk,
        supplierIdfk: supplierIdfk,
        referenceNo: referenceNo,
        purchaseDate: purchaseDate,
        supplierName: supplierName,
        purchasedBy: purchasedBy,
        remarks: remarks,
        lpoNo: lpoNo,
        deliveryNo: deliveryNo,
        quotationNo: quotationNo,
        vehicleNo: vehicleNo,
        grnNo: grnNo,
        genaralNote: genaralNote,
        grossAmount: grossAmount,
        discount: discount,
        tax: tax,
        netTotal: netTotal,
        roundOff: roundOff,
        isEditable: isEditable,
        isCanceled: isCanceled,
        createdBy: createdBy,
        createdDate: createdDate,
        modifiedBy: modifiedBy,
        modifiedDate: modifiedDate,
        rowguid: rowguid,
        isLockVoucher: isLockVoucher,
        purchasedItems: purchasedItem?.map((e) => e.toEntity()).toList(),
      );

  static PurchaseInvoiceModel fromEntity(PurchaseInvoiceEntity entity) =>
      PurchaseInvoiceModel(
        purchaseIdpk: entity.purchaseIdpk,
        purchaseNo: entity.purchaseNo,
        purchaseMode: entity.purchaseMode,
        supplierInvoiceNo: entity.supplierInvoiceNo,
        crLedgerIdfk: entity.crLedgerIdfk,
        drLedgerIdfk: entity.drLedgerIdfk,
        supplierIdfk: entity.supplierIdfk,
        referenceNo: entity.referenceNo,
        purchaseDate: entity.purchaseDate,
        supplierName: entity.supplierName,
        purchasedBy: entity.purchasedBy,
        remarks: entity.remarks,
        lpoNo: entity.lpoNo,
        deliveryNo: entity.deliveryNo,
        quotationNo: entity.quotationNo,
        vehicleNo: entity.vehicleNo,
        grnNo: entity.grnNo,
        genaralNote: entity.genaralNote,
        grossAmount: entity.grossAmount,
        discount: entity.discount,
        tax: entity.tax,
        netTotal: entity.netTotal,
        roundOff: entity.roundOff,
        isEditable: entity.isEditable,
        isCanceled: entity.isCanceled,
        createdBy: entity.createdBy,
        createdDate: entity.createdDate,
        modifiedBy: entity.modifiedBy,
        modifiedDate: entity.modifiedDate,
        rowguid: entity.rowguid,
        isLockVoucher: entity.isLockVoucher,
        purchasedItem:
            entity.purchasedItems?.map(PurchasedItemModel.fromEntity).toList(),
      );
}
